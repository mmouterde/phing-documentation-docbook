<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry [
<!ENTITY % entities SYSTEM "../../entities.ent">
%entities;
]>
<refentry version="5.0" xml:id="phing.coretasks.import"
          xmlns="http://docbook.org/ns/docbook"
          xmlns:ns6="http://www.w3.org/1999/xlink"
          xmlns:ns5="http://www.w3.org/1998/Math/MathML"
          xmlns:ns4="http://www.w3.org/1999/xhtml"
          xmlns:ns3="http://www.w3.org/2000/svg"
          xmlns:ns="http://docbook.org/ns/docbook">
  <refnamediv>
    <refname>ImportTask</refname>

    <refpurpose>Imports another build file into the current
    project.</refpurpose>
  </refnamediv>

  <refsect1 role="note">
    &ref.title.note;

    <para>On execution it will read another Phing file into the same
    Project.</para>

    <para>Functionally it is nearly the same as copy and pasting the imported
    file onto the end of the importing file.</para>
  </refsect1>

  <refsect1 role="note">
    <title>Target Overriding</title>

    <para>If a target in the main file is also present in at least one of the
    imported files, the one from the main file takes precedence.</para>

    <para>So if I import for example a <filename>docs/build.xml</filename>
    file named <code>builddocs</code>, that contains a <code>"docs"</code>
    target, I can redefine it in my main buildfile and that is the one that
    will be called. This makes it easy to keep the same target name, so that
    the overriding target is still called by any other targets--in either the
    main or imported buildfile(s)--for which it is a dependency, with a
    different implementation. The target from
    <filename>docs/build.xml</filename> is made available by the name
    <code>"builddocs.docs"</code>. This enables the new implementation to call
    the old target, thus enhancing it with tasks called before or after
    it.</para>
  </refsect1>

  <refsect1 role="note">
    <title>Special Properties</title>

    <para>Imported files are treated as they are present in the main
    buildfile. This makes it easy to understand, but it makes it impossible
    for them to reference files and resources relative to their path. Because
    of this, for every imported file, Phing adds a property that contains the
    path to the imported buildfile. With this path, the imported buildfile can
    keep resources and be able to reference them relative to its
    position.</para>

    <para>So if I import for example a <filename>docs/build.xml</filename>
    file named <code>builddocs</code>, I can get its path as
    <property>phing.file.builddocs</property>, similarly to the
    <property>phing.file</property> property of the main buildfile.</para>

    <para>Note that <code>"builddocs"</code> is not the filename, but the
    <parameter>name</parameter> attribute present in the imported
    <code>&lt;project&gt;</code> tag.</para>

    <para>If import file does not have a <parameter>name</parameter>
    attribute, the <property>phing.file.projectname</property> property will
    not be set.</para>
  </refsect1>

  <refsect1 role="note">
    <title>Resolving Files Against the Imported File</title>

    <para>Suppose your main build file called
    <filename>importing.xml</filename> imports a build file
    <filename>imported.xml</filename>, located anywhere on the file system,
    and <filename>imported.xml</filename> reads a set of properties from
    <filename>imported.properties</filename> :</para>

    <programlisting language="xml"><![CDATA[<!-- importing.xml -->
<project name="importing" basedir="." default="...">
  <import file="${path_to_imported}/imported.xml"/>
</project>

<!-- imported.xml -->
<project name="imported" basedir="." default="...">
  <property file="imported.properties"/>
</project>]]></programlisting>

    <para>This snippet however will resolve
    <filename>imported.properties</filename> against the basedir of
    <filename>importing.xml</filename>, because the basedir of
    <filename>imported.xml</filename> is ignored by Phing. The right way to
    use <filename>imported.properties</filename> is:</para>

    <programlisting language="xml"><![CDATA[<!-- imported.xml -->
<project name="imported" basedir="." default="...">
  <php function="dirname" returnProperty="imported.basedir">
    <param value="${phing.file.imported}"/>
  </php>
  <property file="${imported.basedir}/imported.properties"/>
</project>]]></programlisting>

    <para>As explained above <property>${phing.file.imported}</property>
    stores the path of the build script, that defines the project called
    imported, (in short it stores the path to
    <filename>imported.xml</filename>) and <code>&lt;php
    function="dirname"&gt;</code> takes its directory. This technique also
    allows <filename>imported.xml</filename> to be used as a standalone file
    (without being imported in other project).</para>
  </refsect1>

  <refsect1 role="example">
    &ref.title.example;

    <programlisting language="xml"><![CDATA[<import file="path/to/build.xml"/>
<import file="path/to/build.xml" optional="true"/>]]></programlisting>
  </refsect1>

  <refsect1 role="parameters">
    &ref.title.attributes;

    <table xml:id="phing.coretasks.import.parameters">
      <caption>Attributes for <classname>ImportTask</classname></caption>

      &taskAttributes.table.titlesLine.all;

      <tr>
        <td class="name"><parameter>file</parameter></td>

        <td class="type"><type>String</type></td>

        <td class="description">The file to import.</td>

        <td class="default">&attributes.defaultValue.NA;</td>

        <td class="required">&attributes.required.yes;</td>
      </tr>

      <tr>
        <td class="name"><parameter>optional</parameter></td>

        <td class="type"><type>Boolean</type></td>

        <td class="description">If <code>true</code>, do not stop the build if
        the file does not exist.</td>

        <td class="default"><code>false</code></td>

        <td class="required">&attributes.required.no;</td>
      </tr>
    </table>
  </refsect1>
</refentry>

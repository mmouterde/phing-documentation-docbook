<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "../entities.ent">
%entities;
]>
<chapter version="5.0" xml:id="phing.chapters.gettingstarted"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Getting Started</title>

  <para>Phing buildfiles are written in XML, and so you will need to know at
  least some basic things about XML to understand the following chapter. There
  is a lot of information available on the web:</para>

  <itemizedlist>
    <listitem>
      <para>The Standard Recommendation of XML by the w3c <link
      xlink:href="http://www.w3.org/TR/2000/REC-xml">http://www.w3.org/TR/2000/REC-xml</link>:
      very technical but exhaustive.</para>
    </listitem>

    <listitem>
      <para>XML In 10 Points <link
      xlink:href="http://www.w3.org/XML/1999/XML-in-10-points">http://www.w3.org/XML/1999/XML-in-10-points</link>:
      Quick introduction into XML.</para>
    </listitem>

    <listitem>
      <para>A technical introduction to XML <link
      xlink:href="http://www.xml.com/pub/a/98/10/guide0.html">http://www.xml.com/pub/a/98/10/guide0.html</link>:
      Interesting article by the creator of DocBook.</para>
    </listitem>
  </itemizedlist>

  <section>
    <title>XML And Phing</title>

    <para>A valid Phing buildfile has the following basic structure:</para>

    <itemizedlist>
      <listitem>
        <para>The document prolog</para>
      </listitem>

      <listitem>
        <para>Exactly one root element called
        <code>&lt;project&gt;</code>.</para>
      </listitem>

      <listitem>
        <para>Several Phing type elements (i.e. <code>&lt;property&gt;</code>,
        <code>&lt;fileset&gt;</code>, <code>&lt;patternset&gt;</code>
        etc.)</para>
      </listitem>

      <listitem>
        <para>One or more <code>&lt;target&gt;</code> elements containing
        built-in or user defined Phing task elements (i.e.
        <code>&lt;install&gt;</code>, <code>&lt;bcc&gt;</code>, etc).</para>
      </listitem>
    </itemizedlist>
  </section>

  <section>
    <title>Writing A Simple Buildfile</title>

    <para>The Foobar project installs some PHP files from a source location to
    a target location, creates an archive of this files and provides an
    optional clean-up of the build tree:</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<project name="FooBar" default="dist">

    <!-- ============================================  -->
    <!-- Target: prepare                               -->
    <!-- ============================================  -->
    <target name="prepare">
        <echo msg="Making directory ./build" />
        <mkdir dir="./build" />
    </target>

    <!-- ============================================  -->
    <!-- Target: build                                 -->
    <!-- ============================================  -->
    <target name="build" depends="prepare">
        <echo msg="Copying files to build directory..." />

        <echo msg="Copying ./about.php to ./build directory..." />
        <copy file="./about.php" tofile="./build/about.php" />

        <echo msg="Copying ./browsers.php to ./build directory..." />
        <copy file="./browsers.php" tofile="./build/browsers.php" />

        <echo msg="Copying ./contact.php to ./build directory..." />
        <copy file="./contact.php" tofile="./build/contact.php" />
    </target>

    <!-- ============================================  -->
    <!-- (DEFAULT)  Target: dist                       -->
    <!-- ============================================  -->
    <target name="dist" depends="build">
        <echo msg="Creating archive..." />

        <tar destfile="./build/build.tar.gz" compression="gzip">
            <fileset dir="./build">
                <include name="*" />
            </fileset>
        </tar>

        <echo msg="Files copied and compressed in build directory OK!" />
    </target>
</project>]]></programlisting>

    <para>A phing build file is normally given the name
    <filename>build.xml</filename> which is the default file name that the
    Phing executable will look for if no other file name is specified.</para>

    <para>To run the above build file and execute the default target (assuming
    it is stored in the current directory with the default name) is only a
    matter of calling: <command>$ phing</command></para>

    <para>This will then execute the <code>dist</code> target. While executing
    the build file each task performed will print some information on what
    actions and what files have been affected.</para>

    <para>To run any of the other target is only a matter of providing the
    name of the target on the command line. So for example to run the
    <code>build</code> target one would have to execute <command>$ phing
    build</command></para>

    <para>It is also possible to specify a number of additional command line
    arguments as described in <xref
    linkend="phing.appendices.factsheet" />.</para>

    <section>
      <title>Project Element</title>

      <para>The first element after the document prolog is the root element
      named <code>&lt;project&gt;</code> on line 3. This element is a
      container for all other elements and can/must have the following
      attributes:</para>

      <table xml:id="phing.chapters.gettingstarted.project.attributes">
        <caption><code>&lt;project&gt;</code> Attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>name</parameter></td>

          <td>The name of the project</td>

          <td>&attributes.required.no;</td>
        </tr>

        <tr>
          <td><parameter>basedir</parameter></td>

          <td>The base directory of the project, use "<code>.</code>" do
          denote the current directory. <emphasis role="bold">Note:</emphasis>
          if none is specified, the parent directory of the build file is
          used!</td>

          <td>&attributes.required.no;</td>
        </tr>

        <tr>
          <td><parameter>default</parameter></td>

          <td>The default target that is to be executed if no target(s) are
          specified when calling this build file.</td>

          <td>&attributes.required.yes;</td>
        </tr>

        <tr>
          <td><parameter>description</parameter></td>

          <td>The description of the project.</td>

          <td>&attributes.required.no;</td>
        </tr>
      </table>
    </section>

    <section>
      <title>Target Element</title>

      <para>A target can <emphasis>depend</emphasis> on other targets. You
      might have a target for installing the files in the build tree, for
      example, and a target for creating a distributable tar.gz archive. You
      can only build a distributable when you have installed the files first,
      so the distribute target depends on the install target. Phing resolves
      these dependencies.</para>

      <para>It should be noted, however, that Phing's depends attribute only
      specifies the order in which targets should be executed - it does not
      affect whether the target that specifies the dependency(s) gets executed
      if the dependent target(s) did not (need to) run.</para>

      <para>Phing tries to execute the targets in the depends attribute in the
      order they appear (from left to right). Keep in mind that it is possible
      that a target can get executed earlier when an earlier target depends on
      it, in this case the dependant is only executed once:</para>

      <programlisting language="xml"><![CDATA[<target name="A" />
<target name="B" depends="A" />
<target name="C" depends="B" />
<target name="D" depends="C,B,A" />]]></programlisting>

      <para>Suppose we want to execute target D. From its depends attribute,
      you might think that first target C, then B and then A is executed.
      Wrong! C depends on B, and B depends on A, so first A is executed, then
      B, then C, and finally D.</para>

      <para>A target gets executed only once, even when more than one target
      depends on it (see the previous example).</para>

      <para>The optional description attribute can be used to provide a
      one-line description of this target, which is printed by the
      <parameter>-projecthelp</parameter> command-line option.</para>

      <section>
        <title>Target attributes</title>

        <para>You can specify one or more of the following attributes within
        the target element.</para>

        <table xml:id="phing.chapters.gettingstarted.target.attributes">
          <caption><code>&lt;target&gt;</code> Attributes</caption>

          &attributes.table.titlesLine.all;

          <tr>
            <td><parameter>name</parameter></td>

            <td>The name of the target</td>

            <td>&attributes.required.yes;</td>
          </tr>

          <tr>
            <td><parameter>depends</parameter></td>

            <td>A comma-seperated list of targets this target depends on.</td>

            <td>&attributes.required.no;</td>
          </tr>

          <tr>
            <td><parameter>if</parameter></td>

            <td>The name of the <emphasis>Property</emphasis> that has to be
            set in order for this target to be executed</td>

            <td>&attributes.required.no;</td>
          </tr>

          <tr>
            <td><parameter>unless</parameter></td>

            <td>The name of the <emphasis>Property</emphasis> that must not be
            set in order for this target to be executed.</td>

            <td>&attributes.required.no;</td>
          </tr>
        </table>
      </section>
    </section>

    <section>
      <title>Task Elements</title>

      <para>A <emphasis>task</emphasis> is a piece of PHP code that can be
      executed. This code implements a particular action to perform (i.e.
      install a file). Therefore it must be defined in the buildfile so that
      it is actually invoked by Phing.</para>

      <para>These references will be resolved before the task is
      executed.</para>

      <para>Tasks have a common structure:</para>

      <programlisting language="xml"><![CDATA[<name attribute1="value1" attribute2="value2" ... />]]></programlisting>

      <para>where <code>name</code> is the name of the task,
      <parameter>attributeN</parameter> is the attribute name, and
      <code>valueN</code> is the value for this attribute.</para>

      <para>There is a set of core tasks (see <xref
      linkend="phing.appendices.coretasks" />) along with a number of optional
      tasks. It is also very easy to write your own tasks (see <xref
      linkend="phing.chapters.extendingphing" />).</para>

      <para>Tasks can be assigned an <parameter>id</parameter>
      attribute:</para>

      <programlisting language="xml"><![CDATA[<taskname id="taskID" ... />]]></programlisting>

      <para>By doing this you can refer to specific tasks later on in the code
      of other tasks.</para>
    </section>

    <section>
      <title>Property Element</title>

      <para><emphasis>Properties</emphasis> are essentially variables that can
      be used in the buildfile. These might be set in the buildfile by calling
      the <link
      linkend="phing.coretasks.property"><classname>PropertyTask</classname></link>,
      or might be set outside Phing on the command line (properties set on the
      command line always override the ones in the buildfile). A property has
      a name and a value only. Properties may be used in the value of task
      attributes. This is done by placing the property name between "
      <code>${</code> " and " <code>}</code> " in the attribute value. For
      example, if there is a <property>BC_BUILD_DIR</property> property with
      the value <code>'build'</code>, then this could be used in an attribute
      like this: <code>${BC_BUILD_DIR}/en</code> . This is resolved to
      <code>build/en</code>.</para>

      <para>It should be noted that if you use a property that is not defined
      via the property task, the system environment table is searched for this
      name. For example, if you would use the property <code>${BCHOME}</code>
      and you did not define this prior in the buildfile or at the command
      line, Phing uses the environment variable <envar>BCHOME</envar> if it
      exists.</para>
    </section>

    <section>
      <title>Built-in Properties</title>

      <para>Phing provides access to system properties as if they had been
      defined using a <code>&lt;property&gt;</code> task. For example,
      <code>${os.name}</code> expands to the name of the operating system. See
      <xref linkend="phing.appendices.factsheet.builtinproperties" /> for a
      complete list.</para>
    </section>
  </section>

  <section>
    <title>More Complex Buildfile</title>

    <programlisting language="xml"><![CDATA[<?xml version="1.0"  encoding="UTF-8" ?>

<project name="testsite" basedir="." default="main">
    <property file="./build.properties" />

    <property name="package"  value="${phing.project.name}" override="true" />
    <property name="builddir" value="./build/testsite" override="true" />
    <property name="srcdir"   value="${project.basedir}" override="true" />

    <!-- Fileset for all files -->
    <fileset dir="." id="allfiles">
        <include name="**" />
    </fileset>

    <!-- ============================================  -->
    <!-- (DEFAULT) Target: main                        -->
    <!-- ============================================  -->
    <target name="main" description="main target">
        <copy todir="${builddir}">
            <fileset refid="allfiles" />
        </copy>
    </target>

    <!-- ============================================  -->
    <!-- Target: Rebuild                               -->
    <!-- ============================================  -->
    <target name="rebuild" description="rebuilds this package">
        <delete dir="${builddir}" />
        <phingcall target="main" />
    </target>
</project>]]></programlisting>

    <para>This build file first defines some properties with the
    <code>&lt;property&gt;</code> task call to
    <classname>PropertyTask</classname>. Then, it defines a fileset and two
    targets. Let us have a quick rundown of this build file.</para>

    <para>The first five four within the <code>project</code> tag define
    properties. They appear in the two ways this tag can occur:</para>

    <itemizedlist>
      <listitem>
        <para>The second <code>property</code> tag contains only the
        <code>file</code> attribute. The value has to be a relative or
        absolute path to a property file (for the format, see <xref
        linkend="phing.appendices.fileformats" />).</para>
      </listitem>

      <listitem>
        <para>The other times, the tag has a <code>name</code> and a
        <code>value</code> attribute. After the call, the value defined in the
        attribute <code>value</code> is available through the key enclosed in
        "<code>${</code>" and "<code>}</code>".</para>
      </listitem>
    </itemizedlist>

    <para>The next noticeable thing in the build file is the
    <code>&lt;fileset&gt;</code> tag. It defines a fileset, i.e. a set of
    multiple files. You can include and exclude files with the
    <code>include</code> and <code>exclude</code> tags within the
    <code>fileset</code> tag. For more information concerning Filesets (i.e.
    Patterns) see <xref linkend="phing.coretypes.fileset" />. The fileset is
    given an <code>id</code> attribute, so it can be referenced later
    on.</para>

    <para>One thing is worth noting here though and that is the use of double
    star expression, i.e. "<code>**</code>". This special regexp refers to all
    files in all subdirectories as well. Compare this with a single
    "<code>*</code>" which would only refer to all files in the current
    subdirectory. So for example the expression "<code>**/*.phps</code>" would
    refer to all files with suffix "<code>.phps</code>" in all subdirectories
    below the current directory.</para>

    <para>The first task only contains a call to
    <classname>CopyTask</classname> via <code>&lt;copy&gt;</code>. The
    interesting thing is within the <code>copy</code> tag. Here, a
    <code>fileset</code> task is not written out with nested
    <code>include</code> or <code>exclude</code> elements, but via the
    <code>refid</code>, the Fileset created earlier is referenced. This way,
    you can use a once defined fileset multiple times in your build
    files.</para>

    <para>The only noticeable thing in the second target is the call to
    <classname>PhingTask</classname> with the <code>&lt;phingcall&gt;</code>
    tag (see <xref linkend="phing.coretasks.phingcall" /> for more
    information). The task executes a specified target within the same build
    file. So, the second target removes the build directory and calls
    <code>main</code> again, thus rebuilding the project.</para>

    <para>A variant is to override properties defined in the build file with
    properties specified on the command line using the <code>-D</code> switch.
    For example to override the <code>builddir</code> in the build file above
    one could call Phing as <command>$ phing
    -Dbuilddir=/tmp/system-test</command></para>
  </section>

  <section>
    <title>Relax NG Grammar</title>

    <para>With a little bit of experience it is not that difficult to write
    and understand Phing build files since the XML format in itself tends to
    be quite verbose. However, it can become a bit tedious and the large (and
    growing) amount of built-in tasks and filters can sometimes make it
    difficult to remember the exact syntax of all the available
    features.</para>

    <para>To help with this the Phing distribution contains a <emphasis>Relax
    NG Grammar</emphasis> (<emphasis role="bold">RE</emphasis>gular <emphasis
    role="bold">LA</emphasis>nguage for <emphasis role="bold">X</emphasis>ML
    <emphasis role="bold">N</emphasis>ext <emphasis
    role="bold">G</emphasis>eneration, <link
    xlink:href="http://www.relaxng.org/">http://www.relaxng.org/</link>) that
    describes the (formal) syntax of the build files. This grammar can help
    validate and write Phing build files since there are many XML editors
    which can make use of this type of grammar to validate, on the fly, as
    well as do context-sensitive auto-completion. Especially the auto-complete
    feature can significantly reduce the time it takes to write a correct, and
    possible complex, Phing build files.</para>

    <para>This grammar is available (as a plain text file) in the distribution
    at: <filename>/etc/phing-grammar.rng</filename></para>

    <para>Since we do not want to neither endorse nor forget any particular
    XML editor with this capability we do not make available such a list of
    editors. Instead, spending a few minutes with Google searching for
    XML-editors is bound to find a number of editors with this
    capability.</para>

    <para>For only validating Phing build files there are several excellent
    free Java based command line tool validators (unfortunately we are not
    aware of any existing PHP based validator). One such validator is Sun
    Microsystems "Sun Multi-Schema Validator" or <acronym>MSV</acronym>
    (available at <link
    xlink:href="https://msv.dev.java.net/">https://msv.dev.java.net/</link>).
    This validator can take an RNG grammar and validate a given XML file
    against the supplied grammar.</para>

    <para>For example, to use <acronym>MSV</acronym> to validate a Phing build
    file the following command line could be used:</para>

    <screen><![CDATA[$ java -jar msv.jar phing-grammar.rng build.xml
start parsing a grammar.
validating /home/joe/build.xml
the document is valid.
$
]]></screen>
  </section>
</chapter>

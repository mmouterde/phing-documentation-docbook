<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "../entities.ent">
%entities;
]>
<chapter version="5.0" xml:id="phing.chapters.projectcomponents"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Project Components</title>

  <para>This goal of this chapter is to make you familiar with the basic
  components of a buildfile. After reading this chapter, you should be able to
  read and understand the basic structure of any buildfile even if you don't
  know exactly what the individual pieces do.</para>

  <para>For supplemental reference information, you should see <xref
  linkend="phing.appendices.coretasks" />, <xref
  linkend="phing.appendices.coretypes" /> and <xref
  linkend="phing.appendices.projectcomponents" />.</para>

  <section>
    <title>Projects</title>

    <para>In the structure of a Phing buildfile, there must be exactly one
    Project defined; the <code>&lt;project&gt;</code> tag is the root element
    of the buildfile, meaning that everything else in the buildfile is
    contained within the <code>&lt;project&gt;</code> element.</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0"?>

<project name="test" description="Simple test build file" default="main" >
  <!-- Everything else here -->
<project>]]></programlisting>

    <para>The listing above shows a sample <code>&lt;project&gt;</code> tag
    that has all attributes available for Projects. The
    <parameter>name</parameter> and <parameter>description</parameter>
    attributes are fairly self-explanatory; the <parameter>default</parameter>
    attribute specifies the default <emphasis>Target</emphasis> to execute if
    no target is specified (Targets are described below). For a complete
    reference, see <xref linkend="phing.projectcomponents.projects" />.</para>
  </section>

  <section>
    <title>Version</title>

    <para>Since Phing 2.4.2 it is possible to include a
    <parameter>phingVersion</parameter> attribute in the
    <code>&lt;project&gt;</code> tag. This attribute allows you to define the
    minimum Phing version required to execute a build file, in order to
    prevent compatibility issues.</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0"?>

<project name="test" phingVersion="2.4.2" >
  <!-- Everything else here -->
<project>]]></programlisting>
  </section>

  <section>
    <title>Project Components in General</title>

    <para>Project Components are all the elements found inside a project, i.e.
    targets, tasks, types, etc. Project components may have attributes and
    nested tags. Attributes only contain simple values, i.e. strings, integers
    etc. Nested elements may be complex Phing types (like FileSets) or simple
    wrapper classes for values with custom keys (see <xref
    linkend="phing.coretypes.fileset" /> for example).</para>

    <para>Any nested elements must be supported by the class that implements
    the project component, and because the nested tags are handled by the
    project component class the same nested tag may have different meanings
    (and different attributes) depending on the context. So, for example, the
    nested tag <code>&lt;param.../&gt;</code> within the
    <code>&lt;phingcall&gt;</code> tag is handled very differently from the
    <code>&lt;param.../&gt;</code> tag within the
    <code>&lt;xsltfilter&gt;</code> tag -- in the first case setting project
    properties, in the second case setting XSLT parameters.</para>
  </section>

  <section>
    <title>Targets</title>

    <para>Targets are collections of project components (but not other
    targets) that are assigned a unique name within their project. A target
    generally performs a specific task -- or calls other targets that perform
    specific tasks -- and therefore a target is a bit like a
    <emphasis>function</emphasis> (but a target has no return value).</para>

    <para>Targets may <emphasis>depend</emphasis> on other targets. For
    example, if target A depends on a target B, then when target A is called
    to be executed, target B will be executed first. Phing automatically
    resolves these dependencies. You cannot have circular references like:
    "target A depends on target B that depends on target A".</para>

    <para>The following code snippet shows an example of the use of
    targets.</para>

    <programlisting language="xml"><![CDATA[<target name="othertask" depends="buildpage" description="Whatever">
  <!-- Task calls here -->
<target>

<target name="buildpage" description="Some description">
  <!-- Task calls here -->
<target>]]></programlisting>

    <para>When Phing is asked to execute the <code>othertask</code> target, it
    will see the dependency and execute <code>buildpage</code> first. Notice
    that the the dependency task can be defined after the dependent
    task.</para>
  </section>

  <section>
    <title>Tasks</title>

    <para>Tasks are responsible for doing the work in Phing. Basically, tasks
    are the individual actions that your buildfile can perform. For example,
    tasks exist to copy a file, create a directory, TAR files in a directory.
    Tasks may also be more complex such as <classname>XsltTask</classname>
    which copies a file and transforms the file using XSLT,
    <classname>SmartyTask</classname> which does something similar using
    Smarty templates, or <classname>CreoleTask</classname> which executes SQL
    statements against a specified DB. See <xref
    linkend="phing.appendices.coretasks" /> for descriptions of Phing
    tasks.</para>

    <para>Tasks support parameters in the form of:</para>

    <itemizedlist>
      <listitem>
        <para>Simple parameters (i.e. strings) passed as XML attributes,
        or</para>
      </listitem>

      <listitem>
        <para>More complex parameters that are passed by nested tags</para>
      </listitem>
    </itemizedlist>

    <para>Simple parameters are basically strings. For example, if you pass a
    value <code>"A simple string."</code> as a parameter, it is evaluated as a
    string and accessible as one. You can also reference properties as
    described in <xref linkend="phing.chapters.gettingstarted" />.</para>

    <note>
      <para>There are special values that are not mapped to strings, but to
      boolean values instead. The values <code>true</code>,
      <code>false</code>, <code>yes</code>, <code>no</code>, <code>on</code>
      and <code>off</code> are translated to true/false boolean values.</para>

      <programlisting language="xml"><![CDATA[<property name="myprop" value="value" override="true"/>]]></programlisting>
    </note>

    <para>However, some tasks support more complex data types as parameters.
    These are passed to the task with <emphasis>nested tags</emphasis>.
    Consider the following example:</para>

    <programlisting language="xml"><![CDATA[<copy>
  <fileset dir=".">
    <include name="**" />
  </fileset>
</copy>]]></programlisting>

    <para>Here, <classname>CopyTask</classname> is passed a complex parameter,
    a <classname>Fileset</classname>. Tasks may support multiple complex types
    in addition to simple parameters. Note that the names of the nested tags
    used to create the complex types depend on the task implementation. Tasks
    may support default Phing types (see below) or may introduce other types,
    for example to wrap key/value pairs.</para>

    <para>Refer to <xref linkend="phing.appendices.coretasks" /> for a list of
    system tasks and their parameters.</para>
  </section>

  <section>
    <title>Types</title>

    <section>
      <title>Basics</title>

      <para>Besides the simple types (strings, integer, booleans) you can use
      in the parameters of tasks, there are more complex Phing
      <emphasis>Types</emphasis>. As mentioned above, they are passed to a
      task by using nesting tags:</para>

      <programlisting language="xml"><![CDATA[<task>
  <type />
</task>

<!-- or: -->

<task>
  <type1>
    <subtype1>
      <!-- etc. -->
    </subtype1>
  </type1>
</task>]]></programlisting>

      <para>Note that types may consist of multiple nested tags -- and
      multiple levels of nested tags, as you can see in the second task call
      above.</para>
    </section>

    <section>
      <title>Referencing Types</title>

      <para>An additional fact about types you should notice is the
      possibility of <emphasis>referencing</emphasis> type instances, i.e. you
      define your type somewhere in your build file and assign an id to it.
      Later, you can refer to that type by the id you assigned.
      Example:</para>

      <programlisting language="xml"><![CDATA[<project>
  <fileset id="foo">
    <include name="*.php" />
  </fileset>

  <!-- Target that uses the type -->
  <target name="foo" >
    <copy todir="/tmp">
      <fileset refid="foo" />
    </copy>
  </target>
</project>]]></programlisting>

      <para>As you can see, the type instance is assigned an id with the
      <parameter>id</parameter> attribute and later on called by passing a
      plain fileset tag to <classname>CopyTask</classname> that only contains
      the <parameter>refid</parameter> attribute.</para>
    </section>
  </section>

  <section>
    <title>Basic Types</title>

    <para>The following section gives you a quick introduction into the basic
    Phing types. For a complete reference see <xref
    linkend="phing.appendices.coretypes" />.</para>

    <section>
      <title>FileSet</title>

      <para>FileSets are groups of files. You can include or exclude specific
      files and patterns to/from a FileSet. The use of patterns is explained
      below. For a start, look at the following example:</para>

      <programlisting language="xml"><![CDATA[<fileset dir="/tmp" id="fileset1">
  <include name="sometemp/file.txt" />
  <include name="othertemp/**" />
  <exclude name="othertemp/file.txt" />
</fileset>

<fileset dir="/home" id="fileset2">
  <include name="foo/**" />
  <include name="bar/**/*.php" />
  <exclude name="foo/tmp/**" />
</fileset>]]></programlisting>

      <para>The use of patterns is quite straightforward: If you simply want
      to match a part of a filename or dirname, you use <code>*</code>. If you
      want to include multiple directories and/or files, you use
      <code>**</code>. This way, filesets provide an easy but powerful way to
      include files.</para>
    </section>

    <section>
      <title>FileList</title>

      <para>FileLists, like FileSets, are collections of files; however, a
      FileList is an explicitly defined list of files -- and the files don't
      necessarily have to exist on the filesystem.</para>

      <para>Besides being able to refer to nonexistent files, another thing
      that FileLists allow you to do is specify files <emphasis>in a certain
      order</emphasis>. Files in FileSets are ordered based on the OS-level
      directory listing functions, in some cases you may want to specify a
      list of files to be processed in a certain order -- e.g. when
      concatenating files using the <code>&lt;append&gt;</code> task.</para>

      <programlisting language="xml"><![CDATA[<filelist dir="base/" files="file1.txt,file2.txt,file3.txt"/>

<!-- OR: -->
<filelist dir="basedir/" listfile="files_to_process.txt"/>]]></programlisting>
    </section>

    <section>
      <title>FilterChains and Filters</title>

      <para>FilterChains can be compared to Unix pipes. Unix pipes add a great
      deal of flexibility to command line operations; for example, if you
      wanted to copy just those lines that contained the string
      <code>blee</code> from the first 10 lines of a file called
      <filename>foo</filename> to a file called <filename>bar</filename>, you
      could do:</para>

      <screen><![CDATA[cat foo | head -n10 | grep blee > bar]]></screen>

      <para>Something like this is not possible with the tasks and types that
      we have learned about thus far, and this is where the incredible
      usefulness of <emphasis>FilterChains</emphasis> becomes apparent. They
      emulate Unix pipes and provide a powerful dimension of file/stream
      manipulation for the tasks that support them.</para>

      <para>FilterChain usage is quite straightforward: you pass the complex
      Phing type <emphasis>filterchain</emphasis> to a task that supports
      FilterChains and add individual filters to the FilterChain. In the
      course of executing the task, the filters are applied (in the order in
      which they appear in the XML) to the contents of the files that are
      being manipulated by your task.</para>

      <programlisting language="xml"><![CDATA[<filterchain>
  <replacetokens>
    <token key="BC_PATH" value="${top.builddir}/"/>
    <token key="BC_PATH_USER" value="${top.builddir}/testsite/user/${lang}/"/>
  </replacetokens>

  <filterreader classname="phing.filters.TailFilter">
    <param name="lines" value="10"/>
  </filterreader>
</filterchain>]]></programlisting>

      <para>The code listing above shows you some example of how to use filter
      chains. For a complete reference see <xref
      linkend="phing.appendices.corefilters" />. This filter chain would
      replace all occurences of <code>BC_PATH</code> and
      <code>BC_PATH_USER</code> with the values assigned to them in lines 4
      and 5. Additionally, it will only return the last 10 lines of the
      files.</para>

      <para>Notice above that FilterChain filters have a "shorthand" notation
      and a long, generic notation. Most filters can be described using both
      of these forms:</para>

      <programlisting language="xml"><![CDATA[<replacetokens>
  <token key="BC_PATH" value="${top.builddir}/"/>
  <token key="BC_PATH_USER" value="${top.builddir}/testsite/user/${lang}/"/>
</replacetokens>

<!-- OR: -->

<filterreader classname="phing.filters.ReplaceTokens">
  <param type="token" name="BC_PATH" value="${top.builddir}/"/>
  <param type="token" name="BC_PATH" value="${top.builddir}/testsite/user/${lang}/"/>
</filterreader>]]></programlisting>

      <para>As the pipe concept in Unix, the filter concept is quite complex
      but powerful. To get a better understanding of different filters and how
      they can be used, take a look at any of the many uses of FilterChains in
      the build files for the binarycloud <xref linkend="bibliography.bc" />
      project. </para>
    </section>

    <section>
      <title>File Mappers</title>

      <para>With FilterChains and filters provide a powerful tool for changing
      <emphasis>contents</emphasis> of files, Mappers provide a powerful tool
      for changing the <emphasis>names</emphasis> of files.</para>

      <para>To use a Mapper, you must specify a pattern to match on and a
      replacement pattern that describes how the matched pattern should be
      transformed. The simplest form is basically no different from the DOS
      <command>copy</command> command:</para>

      <screen><![CDATA[copy *.bat *.txt]]></screen>

      <para>In Phing this is the <code>glob</code> Mapper:</para>

      <programlisting language="xml"><![CDATA[<mapper type="glob" from="*.bat" to="*.txt"/>]]></programlisting>

      <para>Phing also provides support for more complex mapping using regular
      expressions:</para>

      <programlisting language="xml"><![CDATA[<mapper type="regexp" from="^(.*)\.conf\.xml$$" to="\1.php"/>]]></programlisting>

      <para>Consider the example below to see how Mappers can be used in a
      build file. This example includes some of the other concepts introduced
      in this chapter, such as FilterChains and FileSets. If you don't
      understand everything, don't worry. The important point is that Mappers
      are types too, which can be used in tasks that support them.</para>

      <programlisting language="xml"><![CDATA[<copy>
  <fileset dir=".">
    <include name="*.ent.xml" />
  </fileset>

  <mapper type="regexp" from="^(.*)\.ent\.xml$" to="\1.php"/>

  <filterchain>
    <filterreader classname="phing.filters.XsltFilter">
      <param name="style" value="ent2php.xsl" />
    </filterreader>
  </filterchain>
</copy>]]></programlisting>

      <para>For a complete reference, see <xref
      linkend="phing.appendices.coremappers" />.</para>
    </section>
  </section>

  <section>
    <title>Conditions</title>

    <para>Conditions are nested elements of the <link
    linkend="phing.coretasks.condition"><code>condition</code></link> and
    <link linkend="phing.coretasks.if"><code>if</code></link> tasks.</para>

    <section>
      <title>not</title>

      <para>The <code>&lt;not&gt;</code> element expects exactly one other
      condition to be nested into this element, negating the result of the
      condition. It doesn't have any attributes and accepts all nested
      elements of the condition task as nested elements as well.</para>
    </section>

    <section>
      <title>and</title>

      <para>The <code>&lt;and&gt;</code> element doesn't have any attributes
      and accepts an arbitrary number of conditions as nested elements. This
      condition is true if all of its contained conditions are, conditions
      will be evaluated in the order they have been specified in the build
      file.</para>

      <para>The <code>&lt;and&gt;</code> condition has the same shortcut
      semantics as the &amp;&amp; operator in some programming languages, as
      soon as one of the nested conditions is false, no other condition will
      be evaluated.</para>
    </section>

    <section>
      <title>or</title>

      <para>The <code>&lt;or&gt;</code> element doesn't have any attributes
      and accepts an arbitrary number of conditions as nested elements. This
      condition is true if at least one of its contained conditions is,
      conditions will be evaluated in the order they have been specified in
      the build file.</para>

      <para>The <code>&lt;or&gt;</code> condition has the same shortcut
      semantics as the || operator in some programming languages, as soon as
      one of the nested conditions is true, no other condition will be
      evaluated.</para>
    </section>

    <section>
      <title>os</title>

      <para>Test whether the current operating system is of a given
      type.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.os.attributes">
        <caption><code>&lt;os&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>family</parameter></td>

          <td>The name of the operating system family to expect.</td>

          <td>Yes</td>
        </tr>
      </table>

      <para>Supported values for the <parameter>family</parameter> attribute
      are:<itemizedlist>
          <listitem>
            <para><code>windows</code> (for all versions of Microsoft
            Windows)</para>
          </listitem>

          <listitem>
            <para><code>mac</code> (for all Apple Macintosh systems)</para>
          </listitem>

          <listitem>
            <para><code>unix</code> (for all Unix and Unix-like operating
            systems)</para>
          </listitem>
        </itemizedlist></para>
    </section>

    <section>
      <title>equals</title>

      <para>Tests whether the two given Strings are identical.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.equals.attributes">
        <caption><code>&lt;equals&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>arg1</parameter></td>

          <td>First string to test.</td>

          <td>Yes</td>
        </tr>

        <tr>
          <td><parameter>arg2</parameter></td>

          <td>Second string to test.</td>

          <td>Yes</td>
        </tr>

        <tr>
          <td><parameter>casesensitive</parameter></td>

          <td>Perform a case sensitive comparision. Default is
          <code>true</code>.</td>

          <td>No</td>
        </tr>

        <tr>
          <td><parameter>trim</parameter></td>

          <td>Trim whitespace from arguments before comparing them. Default is
          <code>false</code>.</td>

          <td>No</td>
        </tr>
      </table>
    </section>

    <section>
      <title>isset</title>

      <para>Test whether a given property has been set in this project.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.isset.attributes">
        <caption><code>&lt;isset&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>property</parameter></td>

          <td>The name of the property to test.</td>

          <td>Yes</td>
        </tr>
      </table>
    </section>

    <section>
      <title>contains</title>

      <para>Tests whether a string contains another one.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.contains.attributes">
        <caption><code>&lt;contains&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>string</parameter></td>

          <td>The string to search in.</td>

          <td>Yes</td>
        </tr>

        <tr>
          <td><parameter>substring</parameter></td>

          <td>The string to search for.</td>

          <td>Yes</td>
        </tr>

        <tr>
          <td><parameter>casesensitive</parameter></td>

          <td>Perform a case sensitive comparision. Default is
          <code>true</code>.</td>

          <td>No</td>
        </tr>
      </table>
    </section>

    <section>
      <title>istrue</title>

      <para>Tests whether a string evals to true.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.istrue.attributes">
        <caption><code>&lt;istrue&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>value</parameter></td>

          <td>value to test</td>

          <td>Yes</td>
        </tr>
      </table>

      <programlisting language="xml"><![CDATA[<istrue value="${someproperty}"/>
<istrue value="false"/>]]></programlisting>
    </section>

    <section>
      <title>isfalse</title>

      <para>Tests whether a string evals to not true, the negation of
      <code>&lt;istrue&gt;</code>.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.isfalse.attributes">
        <caption><code>&lt;isfalse&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>value</parameter></td>

          <td>value to test</td>

          <td>Yes</td>
        </tr>
      </table>

      <programlisting language="xml"><![CDATA[<isfalse value="${someproperty}"/>
<isfalse value="false"/>]]></programlisting>
    </section>

    <section>
      <title>referenceexists</title>

      <para>Tests whether a specified reference exists.</para>

      <table xml:id="phing.chapters.projectcomponents.conditions.referenceexists.attributes">
        <caption><code>&lt;referenceexists&gt;</code> attributes</caption>

        &attributes.table.titlesLine.all;

        <tr>
          <td><parameter>ref</parameter></td>

          <td>reference to test for</td>

          <td>Yes</td>
        </tr>
      </table>

      <programlisting language="xml"><![CDATA[<referenceexists ref="${someid}"/>]]></programlisting>
    </section>

    <section>
      <title>available</title>

      <para>This condition is identical to the <link
      linkend="phing.coretasks.available"><code>Available</code></link> task,
      all attributes and nested elements of that task are supported, the
      property and value attributes are redundant and will be ignored.</para>
    </section>
  </section>
</chapter>
